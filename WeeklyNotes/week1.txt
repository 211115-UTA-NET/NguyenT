Bash:
pwd - prints the current working directory
cd - change directory
mkdir [file directory]
touch [filename] - creates file it not exist or updates date time stamp
ls - list files (-a < list files including hidden ones)
rm [filename] - remove target file
rm -r [file directory] - remove target folder
rm -i - request confirmation
git clone [git repository.git]
cat [filename] - print file contents
./ - list current location
.. - parent dir
~ - home dir
exit - close bash application
start - use default program to open/run a file
explore . - opens file explorer 
echo - prints out msg ( > [txt file] - override msg in file ) ( >> - appends to msg )
which - prints the location/$path of the executable (git, bash, python3, explorer, etc)
version - flag the prints out the ver of a utility
head - print first 10 (default) files in the list / -[x] to specify exact number
| - pipe character (allows to run multiple statements in one line)
ex. ( ls ./trainer-code/wk1/ | head -3 )

git commands:
clone - creates a copy of a remote repo to a local location
add [filename] - add file (git add . - add everything in current working directory)
status - list all changes/additions/removals in local git repository
commit -m "msg" - bundle changes before pushing the repo (-m required for msg)
restore - discard changes in working directory
push - pushes all contents into the git repository database
pull - updates all contents from git repository

nano - runs script file text editor
.sh - shell file application
expr - reads the line as expression
if/elif/else conditions - conditional statements for comparison
fi - finishes if/else conditions

["$x" -eq "$y"] - examples of logical comparisons
<  >  ==  <=  >== !=
-lt -gt -eq -le -ge -ne
|| - logical or
&& - logical and

example:
read xinput
if [ $xinput == 'y' ] || [ $xinput == 'Y' ]; then
    echo "YES"
elif [ $xinput == 'n' ] || [ $xinput == 'N' ]; then
    echo "NO"
else
    echo "That input is not 'y' or 'n'." 
fi

the syntaxes of equations can be very jank (place spaces between equations or else it may not work as intended)

let addition=$x+$y
let subtract=$x-$y
let multiply=$x*$y
let divide=$x/$y
let modulus=$x%$y

the syntaxes of expressions can be very jank as well (do not place spaces between equations or else it may not work as intended)


C#
Primitive data types
boolean - logical true or false, Y or N, on or off (1 - bit to use, allocates slightly more)
int - all whole numbers from -2147483648 to 2147483647 (inclusive) (signed 32-bit integer)
short - all whole numbers from -32,768 to 32,767 (inclusive) (signed 16-bit integer)
byte - all whole numbers from 0 to 255 (inclusive) (unsigned 8-bit integer)
long - all real numbers beyond normal comparison (extremely long numbers)
double - all real numbers from +-5.0*10^-324 to +- 1.7*10^308 (signed 32-bit) (low precision)
float - all real numbers from +-1.5*10^-45 to +-3.4*10^38 (signed 4-bytes)
char - unicode character (UTF-16)

int foo = 10;
foo is an object of type int

string NewString = "Hi"
NewString is an object type string

if/else if/else statement
if (true) { do stuff }
else if (different condition) { do other stuff }
else { do this }

The conditions need to be:
-prioritized
-testable against good data
-planned for all possibilities

switch statement
switch (<expression>) {
	case x:
		//do stuff
		break;
		
	case y:
		//do stuff
		break;
		
	case z:
		//do stuff
		break;
		
	default: //optional
		//do stuff
		break;
		
}

What this does:
-focuses on a single expression/result
-not prioritized
-still have a default

For
-Limited to numerical comparisons
-Only increments

While
-If conditions meet (true), run

Do-While
do { something }
while(condition);

The difference between while and do-while is that do-while runs rhe code first at least once
before it checks to meet the condition.